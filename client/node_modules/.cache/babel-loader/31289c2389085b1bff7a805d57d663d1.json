{"ast":null,"code":"import { GET_TECHS, ADD_TECH, DELETE_TECH, SET_LOADING, TECHS_ERROR } from '../actions/types'; //Get Techs\n\nexport const getTechs = () => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/techs');\n    const data = await res.json();\n    dispatch({\n      type: GET_TECHS,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: TECHS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Add a new tech\n\nexport const addTech = tech => async dispatch => {\n  try {\n    setLoading();\n    const res = await fetch('/techs', {\n      method: 'POST',\n      body: JSON.stringify(log),\n      headers: {\n        'Content-Type': 'application/json'\n      }\n    });\n    const data = await res.json();\n    dispatch({\n      type: ADD_TECH,\n      payload: data\n    });\n  } catch (err) {\n    dispatch({\n      type: LOGS_ERROR,\n      payload: err.response.statusText\n    });\n  }\n}; //Delete tech from server\n//Set loading to true\n\nexport const setLoading = () => {\n  return {\n    type: SET_LOADING\n  };\n};","map":{"version":3,"sources":["C:/Users/savor/OneDrive/myGitProjects/react-it-logger/src/actions/techActions.js"],"names":["GET_TECHS","ADD_TECH","DELETE_TECH","SET_LOADING","TECHS_ERROR","getTechs","dispatch","setLoading","res","fetch","data","json","type","payload","err","response","statusText","addTech","tech","method","body","JSON","stringify","log","headers","LOGS_ERROR"],"mappings":"AAAA,SACIA,SADJ,EAEIC,QAFJ,EAGIC,WAHJ,EAIIC,WAJJ,EAKIC,WALJ,QAMS,kBANT,C,CASA;;AACA,OAAO,MAAMC,QAAQ,GAAG,MAAM,MAAOC,QAAP,IAAoB;AAC9C,MAAI;AAEAC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,QAAD,CAAvB;AACA,UAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEZ,SADD;AAELa,MAAAA,OAAO,EAAEH;AAFJ,KAAD,CAAR;AAKH,GAZD,CAYE,OAAOI,GAAP,EAAY;AACVR,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAER,WADD;AAELS,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAnBM,C,CAqBP;;AACA,OAAO,MAAMC,OAAO,GAAIC,IAAD,IAAU,MAAOZ,QAAP,IAAoB;AACjD,MAAI;AAEAC,IAAAA,UAAU;AAEV,UAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,QAAD,EAAY;AAC/BU,MAAAA,MAAM,EAAE,MADuB;AAE/BC,MAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeC,GAAf,CAFyB;AAG/BC,MAAAA,OAAO,EAAE;AACL,wBAAgB;AADX;AAHsB,KAAZ,CAAvB;AAOA,UAAMd,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AAEAL,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEX,QADD;AAELY,MAAAA,OAAO,EAAEH;AAFJ,KAAD,CAAR;AAKH,GAlBD,CAkBE,OAAOI,GAAP,EAAY;AACVR,IAAAA,QAAQ,CAAC;AACLM,MAAAA,IAAI,EAAEa,UADD;AAELZ,MAAAA,OAAO,EAAEC,GAAG,CAACC,QAAJ,CAAaC;AAFjB,KAAD,CAAR;AAIH;AACJ,CAzBM,C,CA2BP;AAEA;;AACA,OAAO,MAAMT,UAAU,GAAG,MAAM;AAC5B,SAAM;AACFK,IAAAA,IAAI,EAACT;AADH,GAAN;AAGH,CAJM","sourcesContent":["import {\r\n    GET_TECHS,\r\n    ADD_TECH,\r\n    DELETE_TECH,\r\n    SET_LOADING,\r\n    TECHS_ERROR\r\n  } from '../actions/types';\r\n\r\n\r\n//Get Techs\r\nexport const getTechs = () => async (dispatch) => {\r\n    try {\r\n        \r\n        setLoading()\r\n\r\n        const res = await fetch('/techs')\r\n        const data = await res.json()\r\n\r\n        dispatch({\r\n            type: GET_TECHS,\r\n            payload: data\r\n        })\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: TECHS_ERROR,\r\n            payload: err.response.statusText\r\n        })\r\n    }\r\n}\r\n\r\n//Add a new tech\r\nexport const addTech = (tech) => async (dispatch) => {\r\n    try {\r\n        \r\n        setLoading()\r\n\r\n        const res = await fetch('/techs',  {\r\n            method: 'POST',\r\n            body: JSON.stringify(log),\r\n            headers: {\r\n                'Content-Type': 'application/json'\r\n            }\r\n        })\r\n        const data = await res.json()\r\n\r\n        dispatch({\r\n            type: ADD_TECH,\r\n            payload: data\r\n        })\r\n        \r\n    } catch (err) {\r\n        dispatch({\r\n            type: LOGS_ERROR,\r\n            payload: err.response.statusText\r\n        })\r\n    }\r\n}\r\n\r\n//Delete tech from server\r\n\r\n//Set loading to true\r\nexport const setLoading = () => {\r\n    return{\r\n        type:SET_LOADING\r\n    }\r\n}\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}